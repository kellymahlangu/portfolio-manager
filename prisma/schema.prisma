// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PROD_DATABASE_URL")
}

enum BasicId {
  USER
}

enum SkillCategory {
  FRONTEND
  BACKEND
  TOOL
}

// Basic infomation for portfolio user
model Basic {
  id         BasicId @id @default(USER)
  title      String
  name       String
  surname    String
  occupation String
  tagline    String
  summeryVid String  @default("Nothing here")
}

model AboutQuestions {
  id                BasicId @id @default(USER)
  specialization    String
  excitement        String
  yearsOfExperience Int
  problemsSolved    String
  motivation        String
  interests         String
}

// About infomation for portfolio user
model About {
  id  BasicId @id @default(USER)
  img String
  p1  String
  p2  String
  p3  String
  cv  String
}

// Languages and Tools know and used by owner
model Skill {
  id       Int           @id @default(autoincrement())
  name     String
  icon     String
  level    Int
  category SkillCategory

  Project Project[]

  Experience Experience[]
}

// Projects done by owner
model Project {
  id           String  @id @default(uuid())
  img          String
  name         String
  description  String
  stack        Skill[]
  liveUrl      String
  repoUrl      String?
  isOpenSource Boolean @default(true)
}

// Experience 
model Experience {
  id           Int       @id @default(autoincrement())
  company      String
  role         String
  start        DateTime
  end          DateTime?
  summary      String
  achievements String[]
  skills       Skill[]
}

// contact information for people who filled the contact me Form
model Contact {
  id           String  @id @default(uuid())
  name         String
  email        String
  subject      String?
  message      String
  responded    Boolean @default(false)
  isSubscribed Boolean // whether the said person id subscribed to receive promotional and marketing messeges
}

// languages and skills 

model Devicon {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  altnames   String[]
  tags       String[]
  color      String
  versions   Versions @relation(fields: [versionsId], references: [id])
  versionsId Int
  aliases    Alias[]
  isKnown    Boolean  @default(false)
}

model Versions {
  id   Int      @id @default(autoincrement())
  svg  String[]
  font String[]

  Devicon Devicon[]
}

model Alias {
  id        Int     @id @default(autoincrement())
  base      String
  alias     String
  devicon   Devicon @relation(fields: [deviconId], references: [id])
  deviconId Int
}
